plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '[7.0.57,8.0)'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

ext.early = true
apply from: 'project.gradle'

project.ext.package = project.ext.group + '.' + project.ext.projectName.toLowerCase()

if (project.ext.useElytraVersionFormat) {
    def branch
    if (System.env.BRANCH_NAME) {
        // Jenkins support
        branch = System.env.BRANCH_NAME
        branch = branch.substring(branch.lastIndexOf('/') + 1)
    } else {
        branch = 'git rev-parse --abbrev-ref HEAD'.execute().in.text.trim()
    }
    if (branch == "HEAD") {
        branch = 'git rev-parse --short HEAD'.execute().in.text.trim()
    }
    def commits = 'git rev-list --count HEAD'.execute().in.text.trim()
    def dirty = !'git diff-index HEAD'.execute().in.text.trim().isEmpty()
    version = branch + '-' + project.ext.version + '.' + commits + (dirty ? '-dirty' : '')
} else {
    version = project.ext.version
}

group = project.ext.group
archivesBaseName = project.ext.projectName

ext {
    compoundClassesDir = file('build/compound')
}

configurations {
    shade
}

repositories {
    maven { url = 'https://repo.tridevmc.com/' }
}

minecraft {
    mappings {
        version(project.ext.mappingsVersion)
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${project.ext.neoVersion}"
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.ext.projectName
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.ext.projectName
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.ext.projectName
    }

    data {
        programArguments.addAll '--mod', project.ext.projectName, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : project.ext.minecraftVersion, minecraft_version_range: project.ext.minecraftVersionRange,
            neo_version         : project.ext.neoVersion, neo_version_range: project.ext.neoVersionRange,
            loader_version_range: project.ext.loaderVersionRange,
            mod_id              : project.ext.projectName, mod_version: version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

def needsShadow = !project.ext.compoundModules.isEmpty()

if (needsShadow) {
    dependencies {
        for (String module : project.ext.compoundModules) {
            def moduleIdentifier = 'com.tridevmc.compound:compound-' + module + ':' + project.ext.compoundVersion
            implementation(moduleIdentifier)
            shade(moduleIdentifier)
        }
    }

    tasks.build.dependsOn shadowJar

    artifacts {
        archives shadowJar
    }

    jar {
        archiveClassifier = 'slim'
    }

    shadowJar {
        configurations = [project.configurations.shade]
        relocate 'com.tridevmc.compound', project.ext.projectPackage + '.com.tridevmc.compound'
        finalizedBy 'reobfShadowJar'
    }

    assemble.dependsOn shadowJar
}

ext.early = false
apply from: 'project.gradle'

if (file('private.gradle').exists()) {
    apply plugin: 'maven-publish'
    apply from: 'private.gradle'
}